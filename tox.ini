#
# run tox with:
#   $ tox -- further_parameters
#
[tox]
envlist = py3,yamllint,yaml,lint,sec,schemathesis-oas,test,schemathesis
skipsdist = True

#
# Package for QA
#
[testenv]
envdir = {toxworkdir}/qa
setenv =
  PYTHONPATH=:.
deps=
  yamllint==1.24.2
  openapi_resolver
  schemathesis==2.3.4
  connexion==2.7.0
  black==20.8b1
  bandit==1.6.2
  isort==5.5.2

whitelist_externals =
  bash


[testenv:yamllint]
envdir = {toxworkdir}/qa

commands =
  yamllint  .github .circleci openapi {posargs}

[testenv:yaml]
envdir = {toxworkdir}/qa

commands =
  python -m openapi_resolver openapi/store.yaml

#
# Validate example responses.
#
[testenv:schemathesis-oas]
envdir = {toxworkdir}/qa

commands =
  bash -c ' \
  	connexion run --mock=all openapi/store.yaml  & \
  	sleep 1; \
  	schemathesis run http://localhost:5000/store/v1/openapi.yaml -c all --show-errors-tracebacks ; \
  	kill %1 \
  	'

#
# These sections should be prepared:
#
#  * after picking a programming language
#  * but *before* writing code
#
# When you start writing code, you need those tests
#  already setup. Those tools can be integrated into
#  the IDE.
[testenv:lint]
envdir = {toxworkdir}/qa
commands =
  black api
  isort api


#
# bandit runs security checks on python code
# safety checks python dependencies
#
[testenv:sec]
envdir = {toxworkdir}/qa
commands =
	bandit -r api
	safety check

#
# Run generic tests
#
[testenv:test]
envdir = {toxworkdir}/test
deps=
  -rrequirements.txt
  Flask-Testing==0.8.0
  coverage==5.2.1
  pytest==6.0.1

commands =
  pytest --cov-report term-missing --cov=api tests -v


#
# Use schemathesis to validate example response.
#
[testenv:schemathesis]
envdir = {toxworkdir}/test

setenv =
  MONGO_USER=root
  MONGO_PASSWORD=secret
  MONGO_HOST=mongo

commands =
  bash -c ' \
  	python api  & \
  	sleep 1; \
  	schemathesis run https://localhost:8443/store/v1/openapi.yaml -c all --show-errors-tracebacks ; \
  	kill %1 \
  	'
